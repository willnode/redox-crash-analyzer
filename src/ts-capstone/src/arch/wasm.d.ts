export interface cs_wasm_op {
  type: WASM;
  size: number;
  int7?: number;
  varuint32?: number;
  varuint64?: number;
  uint32?: number;
  uint64?: number;
  immediate?: number[];
  brtable?: {
    length: number;
    address: number;
    default_target: number;
  };
}
export declare enum WASM {
  OP_INVALID = 0,
  OP_NONE = 1,
  OP_INT7 = 2,
  OP_VARUINT32 = 3,
  OP_VARUINT64 = 4,
  OP_UINT32 = 5,
  OP_UINT64 = 6,
  OP_IMM = 7,
  OP_BRTABLE = 8,
  INS_UNREACHABLE = 0,
  INS_NOP = 1,
  INS_BLOCK = 2,
  INS_LOOP = 3,
  INS_IF = 4,
  INS_ELSE = 5,
  INS_END = 11,
  INS_BR = 12,
  INS_BR_IF = 13,
  INS_BR_TABLE = 14,
  INS_RETURN = 15,
  INS_CALL = 16,
  INS_CALL_INDIRECT = 17,
  INS_DROP = 26,
  INS_SELECT = 27,
  INS_GET_LOCAL = 32,
  INS_SET_LOCAL = 33,
  INS_TEE_LOCAL = 34,
  INS_GET_GLOBAL = 35,
  INS_SET_GLOBAL = 36,
  INS_I32_LOAD = 40,
  INS_I64_LOAD = 41,
  INS_F32_LOAD = 42,
  INS_F64_LOAD = 43,
  INS_I32_LOAD8_S = 44,
  INS_I32_LOAD8_U = 45,
  INS_I32_LOAD16_S = 46,
  INS_I32_LOAD16_U = 47,
  INS_I64_LOAD8_S = 48,
  INS_I64_LOAD8_U = 49,
  INS_I64_LOAD16_S = 50,
  INS_I64_LOAD16_U = 51,
  INS_I64_LOAD32_S = 52,
  INS_I64_LOAD32_U = 53,
  INS_I32_STORE = 54,
  INS_I64_STORE = 55,
  INS_F32_STORE = 56,
  INS_F64_STORE = 57,
  INS_I32_STORE8 = 58,
  INS_I32_STORE16 = 59,
  INS_I64_STORE8 = 60,
  INS_I64_STORE16 = 61,
  INS_I64_STORE32 = 62,
  INS_CURRENT_MEMORY = 63,
  INS_GROW_MEMORY = 64,
  INS_I32_CONST = 65,
  INS_I64_CONST = 66,
  INS_F32_CONST = 67,
  INS_F64_CONST = 68,
  INS_I32_EQZ = 69,
  INS_I32_EQ = 70,
  INS_I32_NE = 71,
  INS_I32_LT_S = 72,
  INS_I32_LT_U = 73,
  INS_I32_GT_S = 74,
  INS_I32_GT_U = 75,
  INS_I32_LE_S = 76,
  INS_I32_LE_U = 77,
  INS_I32_GE_S = 78,
  INS_I32_GE_U = 79,
  INS_I64_EQZ = 80,
  INS_I64_EQ = 81,
  INS_I64_NE = 82,
  INS_I64_LT_S = 83,
  INS_I64_LT_U = 84,
  INS_I64_GT_U = 86,
  INS_I64_LE_S = 87,
  INS_I64_LE_U = 88,
  INS_I64_GE_S = 89,
  INS_I64_GE_U = 90,
  INS_F32_EQ = 91,
  INS_F32_NE = 92,
  INS_F32_LT = 93,
  INS_F32_GT = 94,
  INS_F32_LE = 95,
  INS_F32_GE = 96,
  INS_F64_EQ = 97,
  INS_F64_NE = 98,
  INS_F64_LT = 99,
  INS_F64_GT = 100,
  INS_F64_LE = 101,
  INS_F64_GE = 102,
  INS_I32_CLZ = 103,
  INS_I32_CTZ = 104,
  INS_I32_POPCNT = 105,
  INS_I32_ADD = 106,
  INS_I32_SUB = 107,
  INS_I32_MUL = 108,
  INS_I32_DIV_S = 109,
  INS_I32_DIV_U = 110,
  INS_I32_REM_S = 111,
  INS_I32_REM_U = 112,
  INS_I32_AND = 113,
  INS_I32_OR = 114,
  INS_I32_XOR = 115,
  INS_I32_SHL = 116,
  INS_I32_SHR_S = 117,
  INS_I32_SHR_U = 118,
  INS_I32_ROTL = 119,
  INS_I32_ROTR = 120,
  INS_I64_CLZ = 121,
  INS_I64_CTZ = 122,
  INS_I64_POPCNT = 123,
  INS_I64_ADD = 124,
  INS_I64_SUB = 125,
  INS_I64_MUL = 126,
  INS_I64_DIV_S = 127,
  INS_I64_DIV_U = 128,
  INS_I64_REM_S = 129,
  INS_I64_REM_U = 130,
  INS_I64_AND = 131,
  INS_I64_OR = 132,
  INS_I64_XOR = 133,
  INS_I64_SHL = 134,
  INS_I64_SHR_S = 135,
  INS_I64_SHR_U = 136,
  INS_I64_ROTL = 137,
  INS_I64_ROTR = 138,
  INS_F32_ABS = 139,
  INS_F32_NEG = 140,
  INS_F32_CEIL = 141,
  INS_F32_FLOOR = 142,
  INS_F32_TRUNC = 143,
  INS_F32_NEAREST = 144,
  INS_F32_SQRT = 145,
  INS_F32_ADD = 146,
  INS_F32_SUB = 147,
  INS_F32_MUL = 148,
  INS_F32_DIV = 149,
  INS_F32_MIN = 150,
  INS_F32_MAX = 151,
  INS_F32_COPYSIGN = 152,
  INS_F64_ABS = 153,
  INS_F64_NEG = 154,
  INS_F64_CEIL = 155,
  INS_F64_FLOOR = 156,
  INS_F64_TRUNC = 157,
  INS_F64_NEAREST = 158,
  INS_F64_SQRT = 159,
  INS_F64_ADD = 160,
  INS_F64_SUB = 161,
  INS_F64_MUL = 162,
  INS_F64_DIV = 163,
  INS_F64_MIN = 164,
  INS_F64_MAX = 165,
  INS_F64_COPYSIGN = 166,
  INS_I32_WARP_I64 = 167,
  INS_I32_TRUNC_U_F32 = 169,
  INS_I32_TRUNC_S_F64 = 170,
  INS_I32_TRUNC_U_F64 = 171,
  INS_I64_EXTEND_S_I32 = 172,
  INS_I64_EXTEND_U_I32 = 173,
  INS_I64_TRUNC_S_F32 = 174,
  INS_I64_TRUNC_U_F32 = 175,
  INS_I64_TRUNC_S_F64 = 176,
  INS_I64_TRUNC_U_F64 = 177,
  INS_F32_CONVERT_S_I32 = 178,
  INS_F32_CONVERT_U_I32 = 179,
  INS_F32_CONVERT_S_I64 = 180,
  INS_F32_CONVERT_U_I64 = 181,
  INS_F32_DEMOTE_F64 = 182,
  INS_F64_CONVERT_S_I32 = 183,
  INS_F64_CONVERT_U_I32 = 184,
  INS_F64_CONVERT_S_I64 = 185,
  INS_F64_CONVERT_U_I64 = 186,
  INS_F64_PROMOTE_F32 = 187,
  INS_I32_REINTERPRET_F32 = 188,
  INS_I64_REINTERPRET_F64 = 189,
  INS_F32_REINTERPRET_I32 = 190,
  INS_F64_REINTERPRET_I64 = 191,
  INS_INVALID = 512,
  INS_ENDING = 513,
  GRP_INVALID = 0, // cs.GRP_INVALID
  GRP_NUMBERIC = 8,
  GRP_PARAMETRIC = 9,
  GRP_VARIABLE = 10,
  GRP_MEMORY = 11,
  GRP_CONTROL = 12,
  GRP_ENDING = 13,
}
export declare class cs_wasm {
  op_count: number;
  operands: cs_wasm_op[];
  constructor(arch_info_ptr: number, Memory: any);
}
